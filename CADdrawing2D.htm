<!DOCTYPE HTML>
<html>

<head>
	<meta charset="UTF-8">
	<meta meta name="description" content="2D CAD drawing">
	<link rel="shortcut icon" href="./img/ruler-triangle.ico" />
	<title>2D CAD Drawing</title>

	<style>
		body {
			font-family: "Helvetica", "Arial", "FreeSans", "Verdana", "Tahoma", "Lucida Sans", "Lucida Sans Unicode", "Luxi Sans", "sans-serif";
		}
		
		td.menu {
			background: #4679bd;
			color: #fff;
		}
	</style>
	<link rel="stylesheet" type="text/css" href="./jsoneditor/jsoneditor.min.css">

	<script src="./jsoneditor/jsoneditor.min.js"></script>
	<script src="./filereader/filereader.js"></script>
	<script src="./JScad2d.js"></script>
	<script src="./zoom.js"></script>
</head>

<body>
	<table border="0">
		<tr>
			<td rowspan="3"><img src="./img/ruler-triangle-48.png" alt="icon" /></td>
			<td class="menu">Load a JSON file: </td>
			<td class="menu"><input type="file" id="loadDocument" value="Load" name="f3" class="f3" /></td>
			<td rowspan="4">
				<div id="drawing"></div>
			</td>
		</tr>
		<tr>
			<td class="menu">Save file to: </td>
			<td class="menu">
				<button onclick="saveTextAsFile()">JSON</button>&nbsp;
				<button onclick="saveTextAsSVG()">SVG</button>&nbsp;
				<button onclick="readfile(myUrl)">Test</button>
			</td>
		</tr>
		<tr>
			<td class="menu">
				<button type="button" onclick="zoom('zoomIn');">Zoom In</button>
				<button type="button" onclick="zoom('zoomOut');">Zoom Out</button>
			</td>
			<td class="menu">
				<button type="button" onclick="pan('left');">&#8678;</button>
				<button type="button" onclick="pan('up');">&#8679;</button>
				<button type="button" onclick="pan('down');">&#8681;</button>
				<button type="button" onclick="pan('right');">&#8680;</button>
			</td>
		</tr>
		<tr>
			<td colspan="3">
				<div id="jsoneditor" style="width: 450px; height: 400px;"></div>
			</td>
		</tr>
		<tr>
			<td class="menu" colspan="3">
				<form id="myForm3"> squeleton:
					<input class="messageCheckbox" type="checkbox" onclick="drawSqueleton()" value="1" name="Squeleton">
				</form>
				<form id="myForm2"> fillet: 
					<input class="messageCheckbox" type="checkbox" onclick="drawFilletpts()" value="2" name="Fillet">
				</form>
				<form id="myForm1"> origin:
					<input class="messageCheckbox" type="checkbox" onclick="drawOrigin(theObj, 'blue')" value="3" name="Origin">
				</form>
				<button type="button" onclick="doDebug(theObj);">Debug</button>
			</td>
		</tr>
	</table>


	<script type="text/javascript">
		// create the editor
		// needed to use JSON Editor
		var container = document.getElementById("jsoneditor");
		var editor = new JSONEditor(container);

		// -------------------------------------------
		// Global variable
		var theObj;
		var myDoc;
		var theSvgElement;
		var myUrl = "./examples/Part-spigot1.json";
		// ------------------------------------------

		//-------------------------------------------------------------------
		// function:    doInitialization
		//              launch doInitialization at the end of
		//              load JSON function

		function doInitialization() {
			"use strict";

			// Open new window for drawing
			var myWindow = window.open('', 'Drawing', "width=600, height=400", '');
			myWindow.document.open();
			myWindow.document.writeln('<h2>Drawing</h2>');
			myWindow.document.writeln('<div id=\"drawing1\"></div>');
			myDoc = myWindow.document;
			myWindow.document.close();

			// Add event to body: each time a key is hit -> launch function 'doUpdate'
			document.body.addEventListener("keyup", doUpdate, false);

			// Start function 'doUpdate' for the first time
			doUpdate();
		}



		/**
		 * Load a JSON document from local disk
		 */
		FileReaderJS.setupInput(document.getElementById('loadDocument'), {
			readAsDefault: 'Text',
			on: {
				load: function(event, file) {
					// put date read from file to editor object
					editor.setText(event.target.result);
					//doUpdate();
					doInitialization();
				}
			}
		});


		/**
		 * Load a JSON document from server
		 * 
		 * @param {string} url
		 * @param {string} container
		 */
		function readfile(url) {
			"use strict";
			var request = new XMLHttpRequest();
			request.open('GET', url, false); // `false` makes the request synchronous
			request.send(null);
			if (request.status === 200) {
				//document.getElementById(container).innerHTML = request.responseText;
				editor.setText(request.responseText);
				doInitialization();
			}
			return 0;
		}


		// save as SVG
		function saveTextAsSVG() {
			"use strict";
			//var textToWrite = document.getElementById("inputTextToSave").value;
			var json = editor.get();
			var textToWrite = myDoc.getElementById("drawing1").innerHTML;

			var textFileAsBlob = new Blob([textToWrite], {
				type: 'text/plain'
			});
			var fileNameToSaveAs = json.Header.Name + "_svg.svg";

			var downloadLink = document.createElement("a");
			downloadLink.download = fileNameToSaveAs;
			downloadLink.innerHTML = "Download File";
			if (typeof window.webkitURL !== "undefined") {
				// Chrome allows the link to be clicked
				// without actually adding it to the DOM.
				downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
			} else {
				// Firefox requires the link to be added to the DOM
				// before it can be clicked.

				downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
				downloadLink.onclick = destroyClickedElement;
				downloadLink.style.display = "none";
				document.body.appendChild(downloadLink);

			}
			downloadLink.click();
		}


		// save file
		function saveTextAsFile() {
			"use strict";

			//var textToWrite = document.getElementById("inputTextToSave").value;
			var json = editor.get();
			var textToWrite = JSON.stringify(json, null, 2);

			var textFileAsBlob = new Blob([textToWrite], {
				type: 'text/plain'
			});
			var fileNameToSaveAs = json.Header.Name + ".json";

			var downloadLink = document.createElement("a");
			downloadLink.download = fileNameToSaveAs;
			downloadLink.innerHTML = "Download File";
			if (typeof window.webkitURL !== "undefined") {
				// Chrome allows the link to be clicked
				// without actually adding it to the DOM.
				downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
			} else {
				// Firefox requires the link to be added to the DOM
				// before it can be clicked.
				downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
				downloadLink.onclick = destroyClickedElement;
				downloadLink.style.display = "none";
				document.body.appendChild(downloadLink);
			}
			downloadLink.click();
		}


		function destroyClickedElement(myEvent) {
			"use strict";
			document.body.removeChild(myEvent.target);
		} // destroyClickedElement


		//-------------------------------------------------------------
		// Test if str is JSON format
		//-------------------------------------------------------------
		function IsJsonString(str) {
			try {
				JSON.parse(str);
			} catch (e) {
				return false;
			}
			return true;
		}
	</script>


</body>
</html>