<!DOCTYPE HTML>
<html>
<head>
	<meta charset="UTF-8">
	<meta meta name="description" content="2D CAD drawing">
	<link rel="shortcut icon" href="./img/ruler-triangle.ico" />
	<title>2D CAD Drawing</title>
	<style>
        body {
                font-family: "Helvetica", "Arial", "FreeSans", "Verdana", "Tahoma", "Lucida Sans", "Lucida Sans Unicode", "Luxi Sans", sans-serif;
            }
        td.menu {
	           background: #4679bd;
	           color: #fff;
            }
	</style>
	<link rel="stylesheet" type="text/css" href="./jsoneditor/jsoneditor.min.css">
	<script type="text/javascript" src="./jsoneditor/jsoneditor.min.js"></script>
	<script src="./filereader/filereader.js"></script>
	<script src="./JScad2d.js"></script>
	<script src="./zoom.js"></script>
    <script src="./behavior.js"></script>
</head>
<body>
<table border="0">
    <tr>
        <td rowspan="3"><img src="./img/ruler-triangle-48.png" /></td>
        <td class="menu">Load a JSON file: </td>
        <td class="menu"><input type="file" id="loadDocument" value="Load" name="f3" class="f3"/></td>
        <td rowspan="4"><div id="drawing"></div></td>
    </tr>
    <tr>
        <td class="menu">Save file to: </td>
        <td class="menu"><button onclick="saveTextAsFile()" >JSON</button>&nbsp;<button onclick="saveTextAsSVG()" >SVG</button></td>
    </tr>
    <tr>
        <td class="menu">
            <button type="button" onclick="zoom('zoomIn');">Zoom In</button>
            <button type="button" onclick="zoom('zoomOut');">Zoom Out</button>
        </td>
        <td class="menu">
            <button type="button" onclick="pan('left');">&#8678;</button>
            <button type="button" onclick="pan('up');">&#8679;</button>
            <button type="button" onclick="pan('down');">&#8681;</button>
            <button type="button" onclick="pan('right');">&#8680;</button>
        </td>
    </tr>
    <tr>
        <td colspan="3"><div id="jsoneditor" style="width: 450px; height: 400px;" ></div></td>
    </tr>
    <tr>
        <td class="menu" colspan="3" ><h3>Debug section:</h3><br><div id="debug"></div></td>
    </tr>
    <tr>
        <td  class="menu" colspan="3" >
        squeleton: <input class="messageCheckbox" type="checkbox" value="1" name="mailId[]">&nbsp;
        fillet: <input class="messageCheckbox" type="checkbox" value="2" name="mailId[]">&nbsp;
       <form id="myForm"> origin: <input class="messageCheckbox" type="checkbox" onclick="drawOrigin(theObj)" value="3" name="mailId[]"></form>&nbsp;
     </td></tr>
</table>
    

<script type="text/javascript">
    
// create the editor
var container = document.getElementById("jsoneditor");
var editor = new JSONEditor(container);
    
// -------------------------------------------
// Global variable

var theObj;

// ------------------------------------------
    

//-------------------------------------------------------------------
function doInitialization() {
    "use strict";
    doUpdate();
    document.body.addEventListener("keyup", doUpdate, false);

}
    
//-------------------------------------------------------------------
// Main function
//-------------------------------------------------------------------
function doUpdate() {
    "use strict";
    theObj = editor.get();

        
    //var constructor = document.querySelector('.messageCheckbox:checked').value;
    var i,
        constructor = null,
        inputElements = document.getElementsByClassName('messageCheckbox');
    for (i = 0; inputElements[i]; i += 1) {
        if (inputElements[i].checked) {
            constructor = 1 * inputElements[i].value;
            break;
        }
    }

    //document.getElementById("debug").innerHTML = JSON.stringify(json, null, 2);
    document.getElementById("debug").innerHTML = "Total elements: " + theObj.Views.length + "<br>" +
            "checked box: " + constructor  + "<br>";
        

// -----------------------------------------------
// Dessin de la forme
// -------------------------------------------------

    var noview,
        noshape,
        nopt,
        strTmp,
        svg,
        nodim,
        limit = {};
    
    
    // replace parameters by value and evaluate formula
    theObj = doDeparam(theObj);
    
    // Here place function to find min x & min y & max x & max y to automatize the viewBox behavior
    limit = {min: {x: 1000000, y: 1000000}, max: {x: -100000, y: -1000000}};
    for (noview = 0; noview <= theObj.Views.length - 1; noview += 1) {
	    for (noshape = 0; noshape <= theObj.Views[noview].Shapes.length - 1; noshape += 1) {
            for (nopt = 0; nopt <= theObj.Views[noview].Shapes[noshape].Points.length - 1; nopt += 1) {
                limit.min.x = Math.min(limit.min.x, theObj.Views[noview].Shapes[noshape].Points[nopt].x);
                limit.min.y = Math.min(limit.min.y, theObj.Views[noview].Shapes[noshape].Points[nopt].y);
                limit.max.x = Math.max(limit.max.x, theObj.Views[noview].Shapes[noshape].Points[nopt].x);
                limit.max.y = Math.max(limit.max.y, theObj.Views[noview].Shapes[noshape].Points[nopt].y);
            } // for
        } // for
    } // for
    
    // alert((theObj.Header.Scale * limit.min.x) + " - " + (theObj.Header.Scale * limit.min.y) + " : " + (theObj.Header.Scale * limit.max.x) + " - " + (theObj.Header.Scale * limit.max.y));
    
    
    // cas du zoom
    if (typeof theSvgElement === "undefined") {
        strTmp =  (theObj.Header.Scale * limit.min.x) + " " +
                                            (theObj.Header.Scale * limit.min.y) + " " +
                                            (theObj.Header.Scale * (limit.max.x - limit.min.x)) + " " +
                                            (theObj.Header.Scale * (limit.max.y - limit.min.y));
        svg = "<svg height=\"400\" width=\"600\" viewBox=\"" + strTmp + "\"  xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">";
    } else {
        var viewBox = theSvgElement.getAttribute('viewBox');	// Grab the object representing the SVG element's viewBox attribute.
        svg = "<svg height=\"400\" width=\"600\" viewBox=\"" + viewBox + "\"  xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">";
    }

   
    svg += "<title>Example triangle01- simple example of a 'path'</title>";
    svg += "<desc>A path that draws a triangle</desc>";
      
      
	svg += "<defs>";
	svg += "<marker id=\"markerArrowStart\" markerWidth=\"13\" markerHeight=\"13\" refx=\"2\" refy=\"5\"  orient=\"auto\">";
    svg += "<path d=\"M2,5 L10,9 L10,2 L2,5\" style=\"fill:" + theObj.Format.Dimensions_color + ";\" />";
	svg += "</marker>";
	svg += "<marker id=\"markerArrowEnd\" markerWidth=\"13\" markerHeight=\"13\" refx=\"10\" refy=\"5\"  orient=\"auto\">";
    svg += "<path d=\"M2,2 L2,9 L10,5 L2,2\" style=\"fill:" + theObj.Format.Dimensions_color + ";\" />";
	svg += "</marker>";
	svg += "</defs>";
      
    // patern pour hachure
    for (noview = 0; noview <= theObj.Views.length - 1; noview += 1) {
        if (theObj.Views[noview].Header.Hatch.Distance !== null) {
		    svg += "<defs>";
            var espacement = theObj.Views[noview].Header.Hatch.Distance;
            svg += "<pattern id=\"diagonalHatch" + "View" + noview + "\" " +
                    "patternUnits=\"userSpaceOnUse\" " +
                    "width=\"" + theObj.Views[noview].Header.Hatch.Distance + "\" " +
                    "height=\"" + theObj.Views[noview].Header.Hatch.Distance + "\" " +
                    "patternTransform=\"rotate(" + theObj.Views[noview].Header.Hatch.Angle + " 2 2)\">";
            svg += "<path d=\"M -1,2 l 18,0\" " +
                    "stroke=\"" + theObj.Views[noview].Header.Hatch.Color + "\" " +
                    "stroke-width=\"" + theObj.Format.Hatch_thick + "\"/>";
            svg += "</pattern>";
            svg += "</defs>";
	    }
    }


    

    // draw shape (with rounded corner if specified)
    for (noview = 0; noview <= theObj.Views.length - 1; noview += 1) {
	    for (noshape = 0; noshape <= theObj.Views[noview].Shapes.length - 1; noshape += 1) {
		    svg += Shape(theObj.Views[noview].Header.Name,
                 theObj.Views[noview].Shapes[noshape].Points,
                 theObj.Header.Scale,
                 theObj.Views[noview].Header.Origine,
                 theObj.Views[noview].Shapes[noshape].Fill,
                 noview,
                 constructor,
                 theObj.Format);
	    } // for
    } // for



    svg += "\n<g id=\"dimension\"></g>";
    svg += "\n<g id=\"origin\"></g>";
    svg += "</svg>";
    document.getElementById("drawing").innerHTML = svg;
    theSvgElement = document.getElementsByTagName("svg")[0];


    // draw dimension

    for (nodim = 0; nodim <= theObj.Dimensions.length - 1; nodim += 1) {
	    svg += drawDimension(theSvgElement, theObj, theObj.Dimensions[nodim]);
    } // for

    drawOrigin(theObj);

    //window.setTimeout(doUpdate, 250);       // loop for live print not use with event handler
}

 
// ------------------------------------------------
// function: Draw origin
// draw a filled circle at each view origin
// input : objet = the Object json file
// ------------------------------------------------

function drawOrigin(objet) {
    "use strict";
    
	var x = document.forms.myForm,
        noview,
        txtsvg = "",

        currview = objet.Views;

	if (x[0].checked === true) {
		// draw origin for each View
		for (noview = 0; noview <= currview.length - 1; noview += 1) {

			var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
			circle.setAttribute("cx", currview[noview].Header.Origine.x);
			circle.setAttribute("cy", currview[noview].Header.Origine.y);
			circle.setAttribute("r", 4);
			circle.setAttribute("fill", "blue");
			circle.setAttribute("stroke-width", 0);
			theSvgElement.getElementById("origin").appendChild(circle);
		}
	
	} else if (x[0].checked === false) {
        var element = theSvgElement.getElementById("origin");
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
	}
					   
	return 0;
}



// Load a JSON document
FileReaderJS.setupInput(document.getElementById('loadDocument'), {
    readAsDefault: 'Text',
    on: {
        load: function (event, file) {
            editor.setText(event.target.result);
            //doUpdate();
            doInitialization();
        }
    }
});
  
  
// save as SVG
function saveTextAsSVG() {
    "use strict";
	//var textToWrite = document.getElementById("inputTextToSave").value;
	var json = editor.get();
	var textToWrite = document.getElementById("drawing").innerHTML;
	
	var textFileAsBlob = new Blob([textToWrite], {type: 'text/plain'});
	var fileNameToSaveAs = json.Header.Name + "_svg.svg";
	
	

	var downloadLink = document.createElement("a");
	downloadLink.download = fileNameToSaveAs;
	downloadLink.innerHTML = "Download File";
	if (window.webkitURL !== null) {
		// Chrome allows the link to be clicked
		// without actually adding it to the DOM.
		downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
    } else {
		// Firefox requires the link to be added to the DOM
		// before it can be clicked.
		
		downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
		downloadLink.onclick = destroyClickedElement;
		downloadLink.style.display = "none";
		document.body.appendChild(downloadLink);
		
	}

	downloadLink.click();
}
  
// save file
function saveTextAsFile() {
    "use strcit";
    
	//var textToWrite = document.getElementById("inputTextToSave").value;
	var json = editor.get();
	var textToWrite = JSON.stringify(json, null, 2);
	
	var textFileAsBlob = new Blob([textToWrite], {type: 'text/plain'});
    var fileNameToSaveAs = json.Header.Name + ".json";
	
	
	var downloadLink = document.createElement("a");
	downloadLink.download = fileNameToSaveAs;
	downloadLink.innerHTML = "Download File";
	if (window.webkitURL !== null) {
		// Chrome allows the link to be clicked
		// without actually adding it to the DOM.
		downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
	} else {
		// Firefox requires the link to be added to the DOM
		// before it can be clicked.
		
		downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
		downloadLink.onclick = destroyClickedElement;
		downloadLink.style.display = "none";
		document.body.appendChild(downloadLink);
		
	}

	downloadLink.click();
}

function destroyClickedElement(event) {
    "use strict";
	document.body.removeChild(event.target);
}

//-------------------------------------------------------------
// Test if str is JSON format
//-------------------------------------------------------------
function IsJsonString(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

</script>


</body>
</html>
